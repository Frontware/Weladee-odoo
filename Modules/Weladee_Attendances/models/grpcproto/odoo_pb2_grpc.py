# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import odoo_pb2 as odoo__pb2
from . import weladee_pb2 as weladee__pb2


class OdooStub(object):
    """*
    List of available functions for Odoo only.
    Don't forget to authenticate yourself with metadata "authorization" with api_key
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateRequest = channel.unary_unary(
                '/grpc.weladee.com.Odoo/UpdateRequest',
                request_serializer=odoo__pb2.RequestOdoo.SerializeToString,
                response_deserializer=weladee__pb2.Empty.FromString,
                )
        self.GetRequests = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetRequests',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.RequestOdoo.FromString,
                )
        self.AddRequest = channel.unary_unary(
                '/grpc.weladee.com.Odoo/AddRequest',
                request_serializer=odoo__pb2.RequestOdoo.SerializeToString,
                response_deserializer=weladee__pb2.AddResult.FromString,
                )
        self.GetApprovalTypes = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetApprovalTypes',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.ApprovalTypeOdoo.FromString,
                )
        self.UpdateEmployee = channel.unary_unary(
                '/grpc.weladee.com.Odoo/UpdateEmployee',
                request_serializer=odoo__pb2.EmployeeOdoo.SerializeToString,
                response_deserializer=weladee__pb2.Empty.FromString,
                )
        self.GetEmployees = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetEmployees',
                request_serializer=odoo__pb2.OdooRequest.SerializeToString,
                response_deserializer=odoo__pb2.EmployeeOdoo.FromString,
                )
        self.AddEmployee = channel.unary_unary(
                '/grpc.weladee.com.Odoo/AddEmployee',
                request_serializer=odoo__pb2.EmployeeOdoo.SerializeToString,
                response_deserializer=weladee__pb2.AddResult.FromString,
                )
        self.GetEmployeeHolidays = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetEmployeeHolidays',
                request_serializer=odoo__pb2.OdooRequest.SerializeToString,
                response_deserializer=odoo__pb2.HolidayOdoo.FromString,
                )
        self.GetHolidays = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetHolidays',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.HolidayOdoo.FromString,
                )
        self.AddHoliday = channel.unary_unary(
                '/grpc.weladee.com.Odoo/AddHoliday',
                request_serializer=odoo__pb2.HolidayOdoo.SerializeToString,
                response_deserializer=weladee__pb2.AddResult.FromString,
                )
        self.DropHoliday = channel.unary_unary(
                '/grpc.weladee.com.Odoo/DropHoliday',
                request_serializer=odoo__pb2.OdooRequest.SerializeToString,
                response_deserializer=weladee__pb2.Empty.FromString,
                )
        self.UpdateHoliday = channel.unary_unary(
                '/grpc.weladee.com.Odoo/UpdateHoliday',
                request_serializer=odoo__pb2.HolidayOdoo.SerializeToString,
                response_deserializer=weladee__pb2.Empty.FromString,
                )
        self.GetDepartments = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetDepartments',
                request_serializer=odoo__pb2.OdooRequest.SerializeToString,
                response_deserializer=odoo__pb2.DepartmentOdoo.FromString,
                )
        self.AddDepartment = channel.unary_unary(
                '/grpc.weladee.com.Odoo/AddDepartment',
                request_serializer=odoo__pb2.DepartmentOdoo.SerializeToString,
                response_deserializer=weladee__pb2.AddResult.FromString,
                )
        self.UpdateDepartment = channel.unary_unary(
                '/grpc.weladee.com.Odoo/UpdateDepartment',
                request_serializer=odoo__pb2.DepartmentOdoo.SerializeToString,
                response_deserializer=weladee__pb2.Empty.FromString,
                )
        self.GetNewAttendance = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetNewAttendance',
                request_serializer=odoo__pb2.AttendanceRequest.SerializeToString,
                response_deserializer=odoo__pb2.LogEventOdoo.FromString,
                )
        self.GetPositions = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetPositions',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.PositionOdoo.FromString,
                )
        self.AddPosition = channel.unary_unary(
                '/grpc.weladee.com.Odoo/AddPosition',
                request_serializer=odoo__pb2.PositionOdoo.SerializeToString,
                response_deserializer=weladee__pb2.AddResult.FromString,
                )
        self.GetJobAds = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetJobAds',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.JobAdOdoo.FromString,
                )
        self.GetJobApplications = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetJobApplications',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.JobApplicationOdoo.FromString,
                )
        self.GetWorkTypes = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetWorkTypes',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.WorkTypeOdoo.FromString,
                )
        self.GetTasks = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetTasks',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.TaskOdoo.FromString,
                )
        self.GetStages = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetStages',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.StageOdoo.FromString,
                )
        self.GetProjects = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetProjects',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.ProjectOdoo.FromString,
                )
        self.GetCustomers = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetCustomers',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.CustomerOdoo.FromString,
                )
        self.GetTimeSheets = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetTimeSheets',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.SheetOdoo.FromString,
                )
        self.GetExpenses = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetExpenses',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.ExpenseOdoo.FromString,
                )
        self.GetExpenseTypes = channel.unary_stream(
                '/grpc.weladee.com.Odoo/GetExpenseTypes',
                request_serializer=weladee__pb2.Empty.SerializeToString,
                response_deserializer=odoo__pb2.ExpenseTypeOdoo.FromString,
                )
        self.UpdateExpense = channel.unary_unary(
                '/grpc.weladee.com.Odoo/UpdateExpense',
                request_serializer=odoo__pb2.ExpenseOdoo.SerializeToString,
                response_deserializer=weladee__pb2.Empty.FromString,
                )


class OdooServicer(object):
    """*
    List of available functions for Odoo only.
    Don't forget to authenticate yourself with metadata "authorization" with api_key
    """

    def UpdateRequest(self, request, context):
        """
        #
        # #   #####  #####  #####   ####  #    #   ##   #
        #   #  #    # #    # #    # #    # #    #  #  #  #
        #     # #    # #    # #    # #    # #    # #    # #
        ####### #####  #####  #####  #    # #    # ###### #
        #     # #      #      #   #  #    #  #  #  #    # #
        #     # #      #      #    #  ####    ##   #    # ######
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRequests(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetApprovalTypes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateEmployee(self, request, context):
        """
        #######
        #       #    # #####  #       ####  #   # ###### ######
        #       ##  ## #    # #      #    #  # #  #      #
        #####   # ## # #    # #      #    #   #   #####  #####
        #       #    # #####  #      #    #   #   #      #
        #       #    # #      #      #    #   #   #      #
        ####### #    # #      ######  ####    #   ###### ######

        Update employee
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmployees(self, request, context):
        """Stream of employees
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddEmployee(self, request, context):
        """Add employee, get the id as return.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEmployeeHolidays(self, request, context):
        """

        #                                            #    #     #
        #       ######   ##   #    # ######         #     #     #  ####  #      # #####    ##   #   #
        #       #       #  #  #    # #             #      #     # #    # #      # #    #  #  #   # #
        #       #####  #    # #    # #####        #       ####### #    # #      # #    # #    #   #
        #       #      ###### #    # #           #        #     # #    # #      # #    # ######   #
        #       #      #    #  #  #  #          #         #     # #    # #      # #    # #    #   #
        ####### ###### #    #   ##   ######    #          #     #  ####  ###### # #####  #    #   #


        Stream of holidays for 1 specific employee
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetHolidays(self, request, context):
        """Stream of holidays for the company + employees that need to be synchronized with Odoo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddHoliday(self, request, context):
        """Add holiday, get the id as return.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DropHoliday(self, request, context):
        """Remove holiday from database
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateHoliday(self, request, context):
        """Update holiday. raise error if fails
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDepartments(self, request, context):
        """
        ######
        #     # ###### #####    ##   #####  ##### #    # ###### #    # #####
        #     # #      #    #  #  #  #    #   #   ##  ## #      ##   #   #
        #     # #####  #    # #    # #    #   #   # ## # #####  # #  #   #
        #     # #      #####  ###### #####    #   #    # #      #  # #   #
        #     # #      #      #    # #   #    #   #    # #      #   ##   #
        ######  ###### #      #    # #    #   #   #    # ###### #    #   #

        return a stream of departments
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddDepartment(self, request, context):
        """Add department, get the id as return.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDepartment(self, request, context):
        """Update a department. raise error if fails
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNewAttendance(self, request, context):
        """return a stream of attendance record + odoo employee id that have not yet been synchronized with Odoo or that need to be synchronized again.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPositions(self, request, context):
        """rpc SyncAttendance (stream LogEventOdooSync) returns (Empty); // Send a stream of LogEventSync to confirm the log entries have been synchronized with Odoo. This funciton use a stream in order to synchronize a large bunch of records very quickly. Odoo can not update or create or delete LogEvent record in Weladee.
        return a stream of positions. Called "job title" in odoo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AddPosition(self, request, context):
        """Add position, get the id as return.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobAds(self, request, context):
        """
        #
        #  ####  #####
        # #    # #    #
        # #    # #####
        #     # #    # #    #
        #     # #    # #    #
        #####   ####  #####

        Job classified
        Called Position in Recruitment module Odoo
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetJobApplications(self, request, context):
        """Get applications
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkTypes(self, request, context):
        """
        ####### ### #     # #######  #####  #     # ####### ####### #######
        #     #  ##   ## #       #     # #     # #       #          #
        #     #  # # # # #       #       #     # #       #          #
        #     #  #  #  # #####    #####  ####### #####   #####      #
        #     #  #     # #             # #     # #       #          #
        #     #  #     # #       #     # #     # #       #          #
        #    ### #     # #######  #####  #     # ####### #######    #

        return a stream of worktype timesheets    
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTasks(self, request, context):
        """Return stream of tasks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStages(self, request, context):
        """Return stream of stages
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetProjects(self, request, context):
        """return stream of timesheet project
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetCustomers(self, request, context):
        """return stream of timesheet customer
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTimeSheets(self, request, context):
        """return stream of timesheet employee that have been approved (locked)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpenses(self, request, context):
        """
        ####### #     # ######  ####### #     #  #####  #######  #####
        #        #   #  #     # #       ##    # #     # #       #     #
        #         # #   #     # #       # #   # #       #       #
        #####      #    ######  #####   #  #  #  #####  #####    #####
        #         # #   #       #       #   # #       # #             #
        #        #   #  #       #       #    ## #     # #       #     #
        ####### #     # #       ####### #     #  #####  #######  #####

        Return a stream of Expenses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExpenseTypes(self, request, context):
        """Return a stream of Expense types
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateExpense(self, request, context):
        """Expense can be set as refunded on Odoo, then we change status on Weladee
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_OdooServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRequest,
                    request_deserializer=odoo__pb2.RequestOdoo.FromString,
                    response_serializer=weladee__pb2.Empty.SerializeToString,
            ),
            'GetRequests': grpc.unary_stream_rpc_method_handler(
                    servicer.GetRequests,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.RequestOdoo.SerializeToString,
            ),
            'AddRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.AddRequest,
                    request_deserializer=odoo__pb2.RequestOdoo.FromString,
                    response_serializer=weladee__pb2.AddResult.SerializeToString,
            ),
            'GetApprovalTypes': grpc.unary_stream_rpc_method_handler(
                    servicer.GetApprovalTypes,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.ApprovalTypeOdoo.SerializeToString,
            ),
            'UpdateEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateEmployee,
                    request_deserializer=odoo__pb2.EmployeeOdoo.FromString,
                    response_serializer=weladee__pb2.Empty.SerializeToString,
            ),
            'GetEmployees': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEmployees,
                    request_deserializer=odoo__pb2.OdooRequest.FromString,
                    response_serializer=odoo__pb2.EmployeeOdoo.SerializeToString,
            ),
            'AddEmployee': grpc.unary_unary_rpc_method_handler(
                    servicer.AddEmployee,
                    request_deserializer=odoo__pb2.EmployeeOdoo.FromString,
                    response_serializer=weladee__pb2.AddResult.SerializeToString,
            ),
            'GetEmployeeHolidays': grpc.unary_stream_rpc_method_handler(
                    servicer.GetEmployeeHolidays,
                    request_deserializer=odoo__pb2.OdooRequest.FromString,
                    response_serializer=odoo__pb2.HolidayOdoo.SerializeToString,
            ),
            'GetHolidays': grpc.unary_stream_rpc_method_handler(
                    servicer.GetHolidays,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.HolidayOdoo.SerializeToString,
            ),
            'AddHoliday': grpc.unary_unary_rpc_method_handler(
                    servicer.AddHoliday,
                    request_deserializer=odoo__pb2.HolidayOdoo.FromString,
                    response_serializer=weladee__pb2.AddResult.SerializeToString,
            ),
            'DropHoliday': grpc.unary_unary_rpc_method_handler(
                    servicer.DropHoliday,
                    request_deserializer=odoo__pb2.OdooRequest.FromString,
                    response_serializer=weladee__pb2.Empty.SerializeToString,
            ),
            'UpdateHoliday': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateHoliday,
                    request_deserializer=odoo__pb2.HolidayOdoo.FromString,
                    response_serializer=weladee__pb2.Empty.SerializeToString,
            ),
            'GetDepartments': grpc.unary_stream_rpc_method_handler(
                    servicer.GetDepartments,
                    request_deserializer=odoo__pb2.OdooRequest.FromString,
                    response_serializer=odoo__pb2.DepartmentOdoo.SerializeToString,
            ),
            'AddDepartment': grpc.unary_unary_rpc_method_handler(
                    servicer.AddDepartment,
                    request_deserializer=odoo__pb2.DepartmentOdoo.FromString,
                    response_serializer=weladee__pb2.AddResult.SerializeToString,
            ),
            'UpdateDepartment': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDepartment,
                    request_deserializer=odoo__pb2.DepartmentOdoo.FromString,
                    response_serializer=weladee__pb2.Empty.SerializeToString,
            ),
            'GetNewAttendance': grpc.unary_stream_rpc_method_handler(
                    servicer.GetNewAttendance,
                    request_deserializer=odoo__pb2.AttendanceRequest.FromString,
                    response_serializer=odoo__pb2.LogEventOdoo.SerializeToString,
            ),
            'GetPositions': grpc.unary_stream_rpc_method_handler(
                    servicer.GetPositions,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.PositionOdoo.SerializeToString,
            ),
            'AddPosition': grpc.unary_unary_rpc_method_handler(
                    servicer.AddPosition,
                    request_deserializer=odoo__pb2.PositionOdoo.FromString,
                    response_serializer=weladee__pb2.AddResult.SerializeToString,
            ),
            'GetJobAds': grpc.unary_stream_rpc_method_handler(
                    servicer.GetJobAds,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.JobAdOdoo.SerializeToString,
            ),
            'GetJobApplications': grpc.unary_stream_rpc_method_handler(
                    servicer.GetJobApplications,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.JobApplicationOdoo.SerializeToString,
            ),
            'GetWorkTypes': grpc.unary_stream_rpc_method_handler(
                    servicer.GetWorkTypes,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.WorkTypeOdoo.SerializeToString,
            ),
            'GetTasks': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTasks,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.TaskOdoo.SerializeToString,
            ),
            'GetStages': grpc.unary_stream_rpc_method_handler(
                    servicer.GetStages,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.StageOdoo.SerializeToString,
            ),
            'GetProjects': grpc.unary_stream_rpc_method_handler(
                    servicer.GetProjects,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.ProjectOdoo.SerializeToString,
            ),
            'GetCustomers': grpc.unary_stream_rpc_method_handler(
                    servicer.GetCustomers,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.CustomerOdoo.SerializeToString,
            ),
            'GetTimeSheets': grpc.unary_stream_rpc_method_handler(
                    servicer.GetTimeSheets,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.SheetOdoo.SerializeToString,
            ),
            'GetExpenses': grpc.unary_stream_rpc_method_handler(
                    servicer.GetExpenses,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.ExpenseOdoo.SerializeToString,
            ),
            'GetExpenseTypes': grpc.unary_stream_rpc_method_handler(
                    servicer.GetExpenseTypes,
                    request_deserializer=weladee__pb2.Empty.FromString,
                    response_serializer=odoo__pb2.ExpenseTypeOdoo.SerializeToString,
            ),
            'UpdateExpense': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateExpense,
                    request_deserializer=odoo__pb2.ExpenseOdoo.FromString,
                    response_serializer=weladee__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.weladee.com.Odoo', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Odoo(object):
    """*
    List of available functions for Odoo only.
    Don't forget to authenticate yourself with metadata "authorization" with api_key
    """

    @staticmethod
    def UpdateRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/UpdateRequest',
            odoo__pb2.RequestOdoo.SerializeToString,
            weladee__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetRequests',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.RequestOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/AddRequest',
            odoo__pb2.RequestOdoo.SerializeToString,
            weladee__pb2.AddResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetApprovalTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetApprovalTypes',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.ApprovalTypeOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/UpdateEmployee',
            odoo__pb2.EmployeeOdoo.SerializeToString,
            weladee__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEmployees(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetEmployees',
            odoo__pb2.OdooRequest.SerializeToString,
            odoo__pb2.EmployeeOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddEmployee(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/AddEmployee',
            odoo__pb2.EmployeeOdoo.SerializeToString,
            weladee__pb2.AddResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEmployeeHolidays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetEmployeeHolidays',
            odoo__pb2.OdooRequest.SerializeToString,
            odoo__pb2.HolidayOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetHolidays(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetHolidays',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.HolidayOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddHoliday(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/AddHoliday',
            odoo__pb2.HolidayOdoo.SerializeToString,
            weladee__pb2.AddResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DropHoliday(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/DropHoliday',
            odoo__pb2.OdooRequest.SerializeToString,
            weladee__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateHoliday(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/UpdateHoliday',
            odoo__pb2.HolidayOdoo.SerializeToString,
            weladee__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDepartments(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetDepartments',
            odoo__pb2.OdooRequest.SerializeToString,
            odoo__pb2.DepartmentOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddDepartment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/AddDepartment',
            odoo__pb2.DepartmentOdoo.SerializeToString,
            weladee__pb2.AddResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateDepartment(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/UpdateDepartment',
            odoo__pb2.DepartmentOdoo.SerializeToString,
            weladee__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNewAttendance(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetNewAttendance',
            odoo__pb2.AttendanceRequest.SerializeToString,
            odoo__pb2.LogEventOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPositions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetPositions',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.PositionOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def AddPosition(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/AddPosition',
            odoo__pb2.PositionOdoo.SerializeToString,
            weladee__pb2.AddResult.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJobAds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetJobAds',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.JobAdOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetJobApplications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetJobApplications',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.JobApplicationOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorkTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetWorkTypes',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.WorkTypeOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTasks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetTasks',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.TaskOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStages(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetStages',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.StageOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetProjects(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetProjects',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.ProjectOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetCustomers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetCustomers',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.CustomerOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTimeSheets(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetTimeSheets',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.SheetOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExpenses(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetExpenses',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.ExpenseOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetExpenseTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Odoo/GetExpenseTypes',
            weladee__pb2.Empty.SerializeToString,
            odoo__pb2.ExpenseTypeOdoo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UpdateExpense(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Odoo/UpdateExpense',
            odoo__pb2.ExpenseOdoo.SerializeToString,
            weladee__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
