# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import job_pb2 as job__pb2
import weladee_pb2 as weladee__pb2


class JobStub(object):
    """*
    List of available functions for https://job.weladee.com
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetJobAds = channel.unary_stream(
                '/grpc.weladee.com.Job/GetJobAds',
                request_serializer=job__pb2.JobRequest.SerializeToString,
                response_deserializer=job__pb2.JobAd.FromString,
                )
        self.GetSiteMap = channel.unary_stream(
                '/grpc.weladee.com.Job/GetSiteMap',
                request_serializer=job__pb2.SiteMapRequest.SerializeToString,
                response_deserializer=job__pb2.URLSitemap.FromString,
                )
        self.Apply = channel.unary_unary(
                '/grpc.weladee.com.Job/Apply',
                request_serializer=job__pb2.ApplyJob.SerializeToString,
                response_deserializer=weladee__pb2.Empty.FromString,
                )


class JobServicer(object):
    """*
    List of available functions for https://job.weladee.com
    """

    def GetJobAds(self, request, context):
        """Return list of Job Ad based on criterias in Job Request\n
        Header & Trailer contain meta data to insert in html
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSiteMap(self, request, context):
        """Return list of url in order to generate a sitemap. Be aware it only returns the name in URL. You still have to add the prefix
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Apply(self, request, context):
        """Candidate apply for a job
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JobServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetJobAds': grpc.unary_stream_rpc_method_handler(
                    servicer.GetJobAds,
                    request_deserializer=job__pb2.JobRequest.FromString,
                    response_serializer=job__pb2.JobAd.SerializeToString,
            ),
            'GetSiteMap': grpc.unary_stream_rpc_method_handler(
                    servicer.GetSiteMap,
                    request_deserializer=job__pb2.SiteMapRequest.FromString,
                    response_serializer=job__pb2.URLSitemap.SerializeToString,
            ),
            'Apply': grpc.unary_unary_rpc_method_handler(
                    servicer.Apply,
                    request_deserializer=job__pb2.ApplyJob.FromString,
                    response_serializer=weladee__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpc.weladee.com.Job', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Job(object):
    """*
    List of available functions for https://job.weladee.com
    """

    @staticmethod
    def GetJobAds(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Job/GetJobAds',
            job__pb2.JobRequest.SerializeToString,
            job__pb2.JobAd.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSiteMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/grpc.weladee.com.Job/GetSiteMap',
            job__pb2.SiteMapRequest.SerializeToString,
            job__pb2.URLSitemap.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Apply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpc.weladee.com.Job/Apply',
            job__pb2.ApplyJob.SerializeToString,
            weladee__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
